FORMAT: 1A

# Helpful API
Helpful API is a service to interact with helpful.io  It provides API access to all the resources in the app.

## Authentication

API authentication is done using OAuth2.  Helpful acts as an OAuth2 provider.
In order to develop an API client against Helpful, your app will need to be
registered.

More details here:

* https://github.com/applicake/doorkeeper/wiki/Authorization-Code-Flow
* http://tools.ietf.org/html/rfc6749#section-4.1

Roughly, as a Helpful user, you can:

* Create your own "applications" (OAuth clients) that can then participate in the OAuth flow.  Use the "/oauth/applications" URL.
* Authorize other applications (or your own) to "act" on your behalf (make API calls to resources you control).  Use the "/oauth/authorized_applications" URL.

Here's how to do it in development:

1. Log in as normal
2. Visit http://localhost:3000/oauth/applications
3. Create a new application (use `urn:ietf:wg:oauth:2.0:oob` as the callback URL)
4. Copy the application_id and secret key

When your app/client code wants to access Helpful as a user, it must request an auth_code.  That is done by having the user you want to act on behalf of visit the authorize_url:

```ruby
callback = "urn:ietf:wg:oauth:2.0:oob"
app_id = "f9682933bb81c9a76cc4dc6d7b2f4ba7a1db006cc986fa5e8e28d05fafde6dd9"
secret = "23c7ebff714494e3871cf0ab163bb4e9b87bd4ad201521a3ce9e2e1ca984feda"

client = OAuth2::Client.new(app_id, secret, site: "http://localhost:3000/")

client.auth_code.authorize_url(redirect_uri: callback)
# => "http://localhost:3000/oauth/authorize?response_type=code&client_id=f9682933bb81c9a76cc4dc6d7b2f4ba7a1db006cc986fa5e8e28d05fafde6dd9&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob"
```

5. This URL will prompt the browser user if they want to allow the app and will return to you an auth_code (via callback or in the browser window).
6. Your app should remember this auth_code!
7. Then "trade-in" the auth_code for an access_token (Access tokens are short lived (2 hours).  Whenever it expires, you'll have to get a new one.

```
auth_code = "b789332903d1a6e3ec07f1831c8c4e3d20031f576e19ff2ae24dcbb26285b205"
access = client.auth_code.get_token auth_code, redirect_uri: callback
token = access.token
# => "fd7958b3d3d17ba9130718096b3a4cd4a4d8088cb29d41e4d74513fc9aeff5a8"

access.get '/api/messages'
# => #<OAuth2::Response:0x000000027c2778 .... (Normal HTTP Response stuff from the API call here)
```

# Helpful API Root [/api]
NOT IMPLEMENTED - BUT LEFT FOR FUTURE REFERENCE Helpful API entry point.

This resource does not have any attributes. Instead it offers the initial API affordances in the form of the HTTP Link header and HAL links.

## Retrieve Entry Point [GET]

+ Response 200 (application/json)
    + Headers

            Link: <https://helpful.io/api/>;rel="self",<https://helpful.io/api/messages>;rel="conversations"

    + Body

            {
                "_links": {
                    "self": { "href": "/" },
                    "messages": { "href": "/messages?{since}", "templated": true }
                }
            }


# Group Messages
Messages related resources of *Helpful API*.

## Message [/message/{id}]
A single Message object. The Message resource represents a single message that is part of a conversation.

The Message resource has the following attributes:

- id
- conversation_id
- person_id
- content
- data
- created
- updated

The states *id* and *created_at* are assigned by the Helpful API at the moment of creation.


+ Parameters
    + id (UUID) ... ID of the Message

+ Model (application/hal+json)

    JSON representation of Message Resource. In addition to representing its state in the JSON form it offers affordances in the form of the HTTP Link header and HAL links.

    + Body

            {
                "id":"d06a5c13-0981-435d-9510-67e05277191b",
                "conversation_id":"b9df99ba-ce31-4cc1-827d-a8c900a879ee",
                "person_id":"81b303ca-258e-453c-bc84-5eafba8cef87",
                "content":"Voluptatem ab. Ipsum quo.",
                "data":null,
                "created_at":"2013-12-08T13:08:14.758Z",
                "updated_at":"2013-12-08T13:08:14.758Z"
            }

### Retrieve a Single Message [GET]
+ Response 200

    [Message][]


## Messages Collection [/messages{?since}]
Collection of all Messages.

The Message Collection resource has the following attribute:

- total

In addition it **embeds** *Message Resources* in the Helpful API.


+ Model (application/json)

    JSON representation of Message Collection Resource. The Message resources in collections are embedded. Note the embedded Messages resource are incomplete representations of the Message in question. Use the respective Message link to retrieve its full representation.

    + Headers

            Link: <https://helpful.io/api/messages>;rel="self"

    + Body

            {
                "messages": [
                    {
                        "id":"d06a5c13-0981-435d-9510-67e05277191b",
                        "conversation_id":"b9df99ba-ce31-4cc1-827d-a8c900a879ee",
                        "person_id":"81b303ca-258e-453c-bc84-5eafba8cef87",
                        "content":"Voluptatem ab. Ipsum quo.",
                        "data":null,
                        "created_at":"2013-12-08T13:08:14.758Z",
                        "updated_at":"2013-12-08T13:08:14.758Z"
                    }
                ]
            }

### List All Messages [GET]
+ Parameters
    + since (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Messages updated at or after this time are returned.

+ Response 200

    [Messages Collection][]

### Create a Message [POST]
TODO
